name: DeployTest

on:
  push:
    branches: [ '**' ]
    tags-ignore: [ '**' ]

jobs:
  versionning:
    name: Versionning
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
      release: ${{ steps.genver.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        CURRENT_VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --previous-version)
        NEXT_VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo)
        VERSION_HASH=(${NEXT_VERSION//-/ })
        VERSION_HASH=${VERSION_HASH[1]}
        CURRENT_VERSION=$(git tag | grep ${CURRENT_VERSION} | sort -r --version-sort | head -n1)
        VERSION_BITS=(${CURRENT_VERSION//./ })
        VNUM0=${VERSION_BITS[0]}
        VNUM1=${VERSION_BITS[1]}
        VNUM2=${VERSION_BITS[2]}
        VNUM3=${VERSION_BITS[3]:=0}
        VNUM3=$((VNUM3 + 1))
        VERSION=$VNUM0.$VNUM1.$VNUM2.$VNUM3-$VERSION_HASH
        RELEASE=$VNUM0.$VNUM1.$VNUM2.$VNUM3
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "release=$RELEASE" >> $GITHUB_OUTPUT
        echo "RELEASE : $RELEASE"
        echo "Version :" >> $GITHUB_STEP_SUMMARY
        echo "$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "Release :" >> $GITHUB_STEP_SUMMARY
        echo "$RELEASE" >> $GITHUB_STEP_SUMMARY

  format:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        submodules: true

    - name: Install ReSharper
      run: |
        dotnet tool install -g JetBrains.ReSharper.GlobalTools --version 2022.2.2

    - name: Restore
      run: |
        dotnet restore ArmoniK.Extensions.Csharp.sln

    - name: Reformat
      run: |
        jb cleanupcode --exclude="**.props" ArmoniK.Extensions.Csharp.sln

    - name: Check Diff
      run: |
        DIFF="$(git diff --name-only)"

        if [ -z "$DIFF" ]; then
          echo "OK: Format is clean"
        else
          echo "Error: Format was not clean"
          echo "List of files:"
          echo "$DIFF"
          git diff
          exit 1
        fi

  buildProjects:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      GENVERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Build the package
      run: |
        dotnet build ArmoniK.Extensions.Csharp.sln -c Release -p:Version=$GENVERSION

    - name: Pack the package VERSION
      run: |
        dotnet pack ArmoniK.Extensions.Csharp.sln -c Release -o /tmp/packages -p:Version=$GENVERSION
        
    - name: Push the package
      run: |
        find /tmp/packages -name 'ArmoniK*.nupkg' ! -name '*test*.nupkg' -exec dotnet nuget push {} -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols \;

  buildWorkerEnd2End:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

    - name: build
      run: |
        docker build -t dockerhubaneo/armonik_worker_dll:$VERSION -f Worker/src/DLLWorker/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_dll:$VERSION

  buildImagesCross:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildWorkerEnd2End
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_LOGIN }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        file: Worker/src/DLLWorker/Dockerfile
        context: .
        platforms: linux/arm64
        push: true
        tags: |
            dockerhubaneo/armonik_worker_dll:${{ needs.versionning.outputs.version }}-arm

    - name: Create multi-arch manifest
      run: docker buildx imagetools create dockerhubaneo/armonik_worker_dll:${VERSION} --tag dockerhubaneo/armonik_worker_dll:${VERSION} --append dockerhubaneo/armonik_worker_dll:${VERSION}-arm


  testEndToEnd:
    needs:
      - versionning
      - buildProjects
      - buildWorkerEnd2End
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - uses: aneoconsulting/ArmoniK@v2.10.2
        id: deploy-infra
        with:
          worker-image: dockerhubaneo/armonik_worker_dll
          worker-tag: ${{ needs.versionning.outputs.version }}
          ingress: 'None'

      - name: Run EndToEnd.Tests
        timeout-minutes: 15
        run: |
         cd Tests
         mkdir -p ${HOME}/data
         bash -x ./endToEndTests.sh -b -d
         cd -
      
      - name: Run tests
        run: |
         kubectl get svc -n armonik -o wide
         export CPIP=$(kubectl get svc ingress -n armonik -o jsonpath="{.status.loadBalancer.ingress[0]."ip"}")
         export CPHOST=$(kubectl get svc ingress -n armonik -o jsonpath="{.status.loadBalancer.ingress[0]."hostname"}")
         export CPIP=${CPHOST:-$CPIP}
         export CPPort=$(kubectl get svc ingress -n armonik -o custom-columns="PORT:.spec.ports[1].port" --no-headers=true)
         export Grpc__Endpoint=http://$CPIP:$CPPort
         dotnet test --runtime linux-x64 -f net6.0 --logger "trx;LogFileName=test-results.trx"
         
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: IntegrationTests
          path: ./Tests/ArmoniK.EndToEndTests/ArmoniK.EndToEndTests.Client/TestResults/test-results.trx
          reporter: dotnet-trx
